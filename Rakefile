require "nokogiri"
require "net/http"
require "uri"

BASE_URL = "https://www.terraform.io"
RESOURCE_PATTERN = %r{^/docs/providers/\w+/r}
DATA_SOURCE_PATTERN = %r{^/docs/providers/\w+/d}
PROVIDERS = %w[aws template terraform postgresql]

task :default => ["resources.py"]

task "resources.py" do
  resources    = PROVIDERS.flat_map { |provider| get_resources(provider, RESOURCE_PATTERN) }
  data_sources = PROVIDERS.flat_map { |provider| get_resources(provider, DATA_SOURCE_PATTERN) }

  File.open("resources.py", "w") do |f|
    f.puts Resources.new(resources, data_sources).render
  end
end

class Resources
  TMPL = <<ERB
# This file is automatically generated. DO NOT edit it!

resources = [
<% @resources.each do |resource| %>
  '<%= resource  %>',
<% end %>
]

data_sources = [
<% @data_sources.each do |data_source| %>
  '<%= data_source  %>',
<% end %>
]
ERB

  def initialize(resources, data_sources)
    @resources    = resources
    @data_sources = data_sources
  end

  def render
    ERB.new(TMPL, nil, ">").result(binding)
  end
end

def get_resources(provider, pattern)
  uri = URI("https://www.terraform.io/docs/providers/#{provider}/index.html")
  get_terraform_resource_keys(uri, pattern)
end

def get_terraform_resource_keys(uri, href_pattern)
  html = download_and_parse(uri)
  html.css(".nav.docs-sidenav ul.nav > li > a").select { |a| a["href"] =~ href_pattern }.map { |a| a.text }
end

def download_and_parse(uri)
  resp = Net::HTTP.get(uri)
  Nokogiri::HTML(resp)
end

def get_providers
  uri = URI("https://www.terraform.io/docs/providers/index.html")
  html = download_and_parse(uri)
  html.search("li.active ul.nav > li > a").map do |a|
    [a.text, URI(BASE_URL + a["href"])]
  end
end
